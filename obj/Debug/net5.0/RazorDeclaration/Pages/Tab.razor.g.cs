// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace ServiceHostedMediaBot.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 2 "C:\Users\dfoggi\GitHub\ServiceHostedMediaBot\ServiceHostedMediaBot\Pages\Tab.razor"
using Microsoft.Extensions.Configuration;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\dfoggi\GitHub\ServiceHostedMediaBot\ServiceHostedMediaBot\Pages\Tab.razor"
using System.IO;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/tab")]
    public partial class Tab : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 48 "C:\Users\dfoggi\GitHub\ServiceHostedMediaBot\ServiceHostedMediaBot\Pages\Tab.razor"
       
	TeamsFx _teamsfx;
	TeamsFx teamsfx => _teamsfx ??= new TeamsFx(jsRuntime);
	string _clientId, _endpoint;

	public string UserName { get; set; }
	public string Email { get; set; }
	public string Title { get; set; }
	public string UserPhotoUri { get; set; }
	public bool IsLoading { get; set; }

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		try
		{
			_clientId = Configuration.GetValue<string>("CLIENT_ID");
			_endpoint = MyNavigationManager.BaseUri;

			await teamsfx.Init(_clientId, _endpoint, _endpoint);

			var user = await teamsfx.GetInfoAsync();

			UserName = user.DisplayName;

			StateHasChanged();
		}
		catch (Exception) { }	
	}

	private async Task GetUserProfilePhoto()
	{
		try
		{
			IsLoading = true;

			var graphClient = teamsfx.GetGraphServiceClient();
			var photoStream = await graphClient.Me.Photo.Content.Request().GetAsync();
			var profile = await graphClient.Me.Request().GetAsync();

			if(photoStream != null)
			{
				// Copy the photo stream to a memory stream
				// to get the bytes out of it
				var memoryStream = new MemoryStream();
				photoStream.CopyTo(memoryStream);
				var photoBytes = memoryStream.ToArray();

				// Generate a data URI for the photo
				UserPhotoUri = $"data:image/png;base64,{Convert.ToBase64String(photoBytes)}";
			}

			Title = profile.JobTitle;
			Email = profile.Mail;			
		}
		finally
		{
			IsLoading = false;
		}		
	}

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime jsRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IConfiguration Configuration { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager MyNavigationManager { get; set; }
    }
}
#pragma warning restore 1591

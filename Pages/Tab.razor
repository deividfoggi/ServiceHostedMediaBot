@page "/tab"
@using Microsoft.Extensions.Configuration
@using System.IO
@inject NavigationManager MyNavigationManager
@inject IConfiguration Configuration
@inject IJSRuntime jsRuntime

<div class="welcome page">
	<div class="narrow page-padding">
		<img src="hello.png" />
		<h1 class="center">
			Congratulations@(!String.IsNullOrEmpty(UserName) ? ", " + UserName : "")!
		</h1>

		<div class="sections">
		@if(!IsLoading)
		{
			<h2>Get the user's profile photo</h2>
			<p>
				Click below to authorize this app to read your profile photo using
				Microsoft Graph.
			</p>
			<FluentButton Appearance="Appearance.Accent" @onclick="GetUserProfilePhoto">Authorize</FluentButton>

			@if(!String.IsNullOrEmpty(UserPhotoUri))
			{
				<div class="profile">
					<img class="avatar" src="@UserPhotoUri"/>
					<div class="info">
						<h3>@UserName</h3>
						<p>@Title</p>
						<p>@Email</p>
					</div>
				</div>		
			}
		}
		else if(IsLoading)
		{
			<FluentProgressRing class="center"/>
		}
		</div>

	</div>
</div>



@code {
	TeamsFx _teamsfx;
	TeamsFx teamsfx => _teamsfx ??= new TeamsFx(jsRuntime);
	string _clientId, _endpoint;

	public string UserName { get; set; }
	public string Email { get; set; }
	public string Title { get; set; }
	public string UserPhotoUri { get; set; }
	public bool IsLoading { get; set; }

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		try
		{
			_clientId = Configuration.GetValue<string>("CLIENT_ID");
			_endpoint = MyNavigationManager.BaseUri;

			await teamsfx.Init(_clientId, _endpoint, _endpoint);

			var user = await teamsfx.GetInfoAsync();

			UserName = user.DisplayName;

			StateHasChanged();
		}
		catch (Exception) { }	
	}

	private async Task GetUserProfilePhoto()
	{
		try
		{
			IsLoading = true;

			var graphClient = teamsfx.GetGraphServiceClient();
			var photoStream = await graphClient.Me.Photo.Content.Request().GetAsync();
			var profile = await graphClient.Me.Request().GetAsync();

			if(photoStream != null)
			{
				// Copy the photo stream to a memory stream
				// to get the bytes out of it
				var memoryStream = new MemoryStream();
				photoStream.CopyTo(memoryStream);
				var photoBytes = memoryStream.ToArray();

				// Generate a data URI for the photo
				UserPhotoUri = $"data:image/png;base64,{Convert.ToBase64String(photoBytes)}";
			}

			Title = profile.JobTitle;
			Email = profile.Mail;			
		}
		finally
		{
			IsLoading = false;
		}		
	}
}
